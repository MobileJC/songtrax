{"ast":null,"code":"var _jsxFileName = \"/Users/mobilejc/Documents/COMP2140/assessments/A2React/songtrax/src/pages/SampleCreateEdit.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, NavLink, useParams, useNavigate } from 'react-router-dom';\nimport getCurrentDateTime from '../data/GetDateTime';\nimport { getSampleById, createSample, editSample } from '../data/api';\nimport { pianoTap, frenchHornTap, guitarTap, piano, frenchHorn } from '../data/ToneInstrument';\nimport './../starterstyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst instrumentType = [{\n  type: \"Piano\",\n  selectedStatus: true\n}, {\n  type: \"Frech Horn\",\n  selectedStatus: false\n}, {\n  type: \"Guitar\",\n  selectedStatus: false\n}, {\n  type: \"Drums\",\n  selectedStatus: false\n}];\nconst keys = [{\n  \"B\": [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}];\nconst baseURL = 'https://comp2140.uqcloud.net/api/sample/';\nconst APIKEY = 'gdJY8BdnNf';\nconst songName = \"test\";\nconst SampleCreateEdit = () => {\n  _s();\n  // Extracts the \"api_key\" param from the route.\n  const {\n    id\n  } = useParams();\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Allows for navigation.\n  const history = useNavigate();\n\n  // Local state for holding the sample's instrument and keys.\n  const [sample, setSample] = useState({\n    instrument: '',\n    keys: []\n  });\n  const [instsType, setInstsSelection] = useState(instrumentType);\n  const toggleInstrument = inst => {\n    const instResult = instsType.map(_inst => ({\n      ..._inst,\n      selectedStatus: _inst.type === inst.type\n    }));\n    setInstsSelection(instResult);\n  };\n  const [key, setKeys] = useState(keys);\n  const toggleNotes = (note, noteSelection) => {\n    const newKeys = [...keys];\n    const noteKey = Object.keys(newKeys[note])[0];\n    newKeys[note][noteKey][noteSelection] = !newKeys[note][noteKey][noteSelection];\n    setKeys(newKeys);\n  };\n\n  /**\n   * Fetches sample by API key if it's has been created before.\n   * Sets the local state with the feteched data.\n   */\n  useEffect(() => {\n    if (id !== 'new') {\n      const fetchSample = async () => {\n        const data = await getSampleById(id);\n        setSample(data);\n      };\n      fetchSample();\n    }\n  }, [id]);\n\n  /**\n  * Handles the form submission. \n  * Calls either createSample or editSample based on whether it's a new sample or an existing one.\n  */\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Set loading to true when save starts\n    setIsSaving(true);\n    try {\n      if (id === 'new') {\n        const returnedJson = await createSample(sample);\n        history(`${baseURL}${returnedJson.id}/?api_key=${APIKEY}`);\n      } else {\n        await editSample(id, sample);\n      }\n    } catch (error) {\n      // Handle error\n    } finally {\n      // Set loading to false when save is completed.\n      setIsSaving(false);\n    }\n  };\n\n  /* const togglePreview = (prev) => {\n      let prevResult = preview.filter((_prev) => _prev.previewStatus !== prev.previewStatus);\n      setPreviewing([...prevResult, {...prev, selectedStatus: !prev.selectedStatus}]);\n  } */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Edit Sample:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"card edit-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          value: sample.name,\n          onChange: e => setSample({\n            ...sample,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"button\",\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"Submit\",\n            className: \"bright-button\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-row-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row-label\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Instrument\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sequence-row-container\",\n          children: instsType.map(inst => /*#__PURE__*/_jsxDEV(SelectInstrument, {\n            instrument: inst.type,\n            selected: inst.selectedStatus,\n            toggleSelection: () => toggleInstrument(inst)\n          }, inst.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), keys.map((keyObject, index) => {\n        const keyName = Object.keys(keyObject)[0];\n        const keyStatuses = keyObject[keyName];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-row-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row-label\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: keyName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sequence-row-container\",\n            children: keyStatuses.map((status, buttonIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: status ? \"toggle-selected\" : \"toggle\",\n              onClick: () => toggleNotes(index, buttonIndex),\n              onChange: e => setSample({\n                ...sample,\n                keys: e.target.value\n              })\n            }, `button-${keyName}-${buttonIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this)]\n        }, keyName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(SampleCreateEdit, \"krGtJbrX63KSD6kcSdBvPUf2cf4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = SampleCreateEdit;\nfunction SelectInstrument({\n  instrument,\n  selected,\n  toggleSelection\n}) {\n  const handleClick = () => {\n    toggleSelection();\n  };\n  const buttonClass = selected ? 'toggle-selected' : 'toggle';\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: buttonClass,\n    onClick: handleClick,\n    children: instrument\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SelectInstrument;\nfunction Preview({\n  toneObject,\n  toneTransport,\n  tonePart\n}) {\n  _s2();\n  const initialPreviewing = false;\n  const [previewing, setPreviewing] = useState(initialPreviewing);\n  function handleButtonClick() {\n    toneObject.start();\n    toneTransport.stop();\n    if (previewing) {\n      setPreviewing(false);\n      console.log(\"Preview stopped manually.\");\n    } else {\n      setPreviewing(true);\n      console.log(\"Preview started.\");\n      toneTransport.start();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleButtonClick,\n    className: previewing ? \"toggle-selected\" : \"toggle\",\n    children: previewing ? \"Stop Previewing\" : \"Previewing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 12\n  }, this);\n}\n_s2(Preview, \"6WpevstZuCV79Yxb1mTiX7LCfiM=\");\n_c3 = Preview;\nexport default SampleCreateEdit;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SampleCreateEdit\");\n$RefreshReg$(_c2, \"SelectInstrument\");\n$RefreshReg$(_c3, \"Preview\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Route","Routes","NavLink","useParams","useNavigate","getCurrentDateTime","getSampleById","createSample","editSample","pianoTap","frenchHornTap","guitarTap","piano","frenchHorn","jsxDEV","_jsxDEV","Fragment","_Fragment","instrumentType","type","selectedStatus","keys","baseURL","APIKEY","songName","SampleCreateEdit","_s","id","isSaving","setIsSaving","history","sample","setSample","instrument","instsType","setInstsSelection","toggleInstrument","inst","instResult","map","_inst","key","setKeys","toggleNotes","note","noteSelection","newKeys","noteKey","Object","fetchSample","data","handleSubmit","e","preventDefault","returnedJson","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","name","value","onChange","target","SelectInstrument","selected","toggleSelection","keyObject","index","keyName","keyStatuses","status","buttonIndex","onClick","_c","handleClick","buttonClass","_c2","Preview","toneObject","toneTransport","tonePart","_s2","initialPreviewing","previewing","setPreviewing","handleButtonClick","start","stop","console","log","_c3","$RefreshReg$"],"sources":["/Users/mobilejc/Documents/COMP2140/assessments/A2React/songtrax/src/pages/SampleCreateEdit.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, NavLink, useParams, useNavigate } from 'react-router-dom';\nimport getCurrentDateTime from '../data/GetDateTime';\nimport { getSampleById, createSample, editSample } from '../data/api';\nimport { pianoTap, frenchHornTap, guitarTap, piano, frenchHorn } from '../data/ToneInstrument';\nimport './../starterstyles.css';\n\nconst instrumentType = [\n    {type: \"Piano\", selectedStatus: true},\n    {type: \"Frech Horn\", selectedStatus: false},\n    {type: \"Guitar\", selectedStatus: false},\n    {type: \"Drums\", selectedStatus: false}\n];\n\nconst keys = [\n    {\"B\": [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]}\n];\n\n\nconst baseURL = 'https://comp2140.uqcloud.net/api/sample/';\n\nconst APIKEY = 'gdJY8BdnNf';\n\nconst songName = \"test\";\n\n\nconst SampleCreateEdit = () => {\n\n   // Extracts the \"api_key\" param from the route.\n   const { id } = useParams();\n\n   const [isSaving, setIsSaving] = useState(false); \n\n   // Allows for navigation.\n   const history = useNavigate();\n\n    // Local state for holding the sample's instrument and keys.\n   const [sample, setSample] = useState({instrument: '', keys: [], }); \n\n    const [instsType, setInstsSelection] = useState(instrumentType);\n\n    const toggleInstrument = (inst) => {\n        const instResult = instsType.map((_inst) => ({\n            ..._inst,\n            selectedStatus: _inst.type === inst.type,\n          }));\n          setInstsSelection(instResult);\n    };\n    \n    const [key, setKeys] = useState(keys);\n\n    const toggleNotes = (note, noteSelection) => {\n        const newKeys = [...keys];\n        const noteKey = Object.keys(newKeys[note])[0];\n        newKeys[note][noteKey][noteSelection] = !newKeys[note][noteKey][noteSelection];\n        setKeys(newKeys);\n    };\n\n    /**\n     * Fetches sample by API key if it's has been created before.\n     * Sets the local state with the feteched data.\n     */\n    useEffect(() => {\n        if (id !== 'new') {\n            const fetchSample = async() => {\n                const data = await getSampleById(id);\n                setSample(data);\n            };\n            fetchSample();\n        }\n    }, [id]);\n\n    /**\n    * Handles the form submission. \n    * Calls either createSample or editSample based on whether it's a new sample or an existing one.\n    */\n    const handleSubmit = async (e) => {\n\n        e.preventDefault();\n\n        // Set loading to true when save starts\n        setIsSaving(true);\n\n        try {\n            if (id === 'new') {\n                const returnedJson = await createSample(sample);\n                history(`${baseURL}${returnedJson.id}/?api_key=${APIKEY}`);\n            } else {\n                await editSample(id, sample);\n            }\n        } catch (error) {\n            // Handle error\n        } finally {\n            // Set loading to false when save is completed.\n            setIsSaving(false);\n        }\n    };\n\n    \n    \n    /* const togglePreview = (prev) => {\n        let prevResult = preview.filter((_prev) => _prev.previewStatus !== prev.previewStatus);\n        setPreviewing([...prevResult, {...prev, selectedStatus: !prev.selectedStatus}]);\n    } */\n\n    return (\n        <>\n            <main>\n                <h2 className=\"title\">Edit Sample:</h2>\n                <form onSubmit={handleSubmit} className=\"card edit-card\">\n                    <input \n                        type=\"text\" \n                        id=\"name\" \n                        name=\"name\" \n                        value={sample.name}\n                        onChange={(e) => setSample({ ...sample, name: e.target.value })}>\n                    </input>\n                    <div className=\"button-group-container\">\n                        <button type=\"button\" className=\"button\">Preview</button>\n                        <button type=\"Submit\" className=\"bright-button\">Save</button>\n                    </div>\n                </form>\n\n                <div className=\"toggle-row-container\">\n                    <div className=\"row-label\">\n                        <h4>Instrument</h4>\n                    </div>\n                    <div className=\"sequence-row-container\">\n                    {instsType.map((inst) => (\n                            <SelectInstrument\n                            key={inst.type}\n                            instrument={inst.type}\n                            selected={inst.selectedStatus}\n                            toggleSelection={() => toggleInstrument(inst)}\n                          />\n                        ))}\n                    </div>\n                </div>\n\n                {keys.map((keyObject, index) => {\n                    const keyName = Object.keys(keyObject)[0];\n                    const keyStatuses = keyObject[keyName];\n\n                    return (\n                    <div key={keyName} className=\"toggle-row-container\">\n                        <div className=\"row-label\">\n                            <h4>{keyName}</h4>\n                        </div>\n                        <div className=\"sequence-row-container\">\n                            {keyStatuses.map((status, buttonIndex) => (\n                                <button\n                                className={status ? \"toggle-selected\" : \"toggle\"}\n                                key={`button-${keyName}-${buttonIndex}`}\n                                onClick={() => toggleNotes(index, buttonIndex)}\n                                onChange={(e) => setSample({ ...sample, keys: e.target.value})}\n                              ></button>\n                            ))}\n                        </div>\n                    </div>\n                    );\n                })}\n\n            </main>\n        </>\n    ); \n};\n\nfunction SelectInstrument({instrument, selected, toggleSelection}) {\n    const handleClick = () => {\n        toggleSelection();\n    }   \n\n    const buttonClass = selected ? 'toggle-selected' : 'toggle';\n\n  return (\n    <button className={buttonClass} onClick={handleClick}>\n      {instrument}\n    </button>\n  );\n}\n\nfunction Preview({ toneObject, toneTransport, tonePart}) {\n\n    const initialPreviewing = false;\n    const [previewing, setPreviewing] = useState(initialPreviewing);\n\n    function handleButtonClick() {\n\n        toneObject.start();\n        toneTransport.stop();\n\n        if(previewing) {\n            setPreviewing(false);\n            console.log(\"Preview stopped manually.\");\n        }\n        else {\n            setPreviewing(true);\n            console.log(\"Preview started.\");\n            toneTransport.start();\n        }\n\n    }\n\n    return <button onClick={handleButtonClick} className={previewing ? \"toggle-selected\" : \"toggle\"}>{previewing ? \"Stop Previewing\" : \"Previewing\"}</button>\n}\n\nexport default SampleCreateEdit;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}