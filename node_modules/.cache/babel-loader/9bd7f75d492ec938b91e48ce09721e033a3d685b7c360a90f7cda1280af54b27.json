{"ast":null,"code":"var _jsxFileName = \"/Users/mobilejc/Documents/COMP2140/assessments/A2React/songtrax/src/pages/SampleCreateEdit.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, NavLink, useParams, useNavigate } from 'react-router-dom';\nimport getCurrentDateTime from '../data/GetDateTime';\nimport { getSampleById, createSample, editSample } from '../data/api';\nimport { pianoTap, frenchHornTap, guitarTap, piano, frenchHorn } from '../data/ToneSynth';\nimport './../starterstyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst instrumentType = [{\n  type: \"Piano\",\n  selectedStatus: true\n}, {\n  type: \"Frech Horn\",\n  selectedStatus: false\n}, {\n  type: \"Guitar\",\n  selectedStatus: false\n}, {\n  type: \"Drums\",\n  selectedStatus: false\n}];\nconst keys = [{\n  \"B\": [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}];\nconst baseURL = 'https://comp2140.uqcloud.net/api/sample/';\nconst APIKEY = 'gdJY8BdnNf';\nconst songName = \"test\";\nconst EditSamplepage = () => {\n  _s();\n  // Extracts the \"api_key\" param from the route.\n  const {\n    id\n  } = useParams();\n\n  // Allows for navigation.\n  const history = useNavigate();\n\n  // Local state for holding the sample's instrument and keys.\n  const [sample, setSample] = useState({\n    instrument: '',\n    keys: []\n  });\n\n  /**\n   * Fetches sample by API key if it's has been created before.\n   * Sets the local state with the feteched data.\n   */\n  useEffect(() => {\n    if (id !== 'new') {\n      const fetchSample = async () => {\n        const data = await getSampleById(id);\n        setSample(data);\n      };\n      fetchSample();\n    }\n  }, [id]);\n};\n\n/**\n * Handles the form submission. \n * Calls either createSample or editSample based on whether it's a new sample or an existing one.\n */\n_s(EditSamplepage, \"YRt15GNqf3Jigm1LhNhwupI8L/g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditSamplepage;\nconst handleSubmit = async e => {\n  _s2();\n  const [isSaving, setIsSaving] = useState(false);\n  e.preventDefault();\n\n  // Set loading to true when save starts\n  setIsSaving(true);\n  try {\n    if (id === 'new') {\n      const returnedJson = await createSample(sample);\n      history(`${baseURL}${returnedJson.id}/?api_key=${APIKEY}`);\n    } else {\n      await editSample(id, sample);\n    }\n  } catch (error) {\n    // Handle error\n  } finally {\n    // Set loading to false when save is completed.\n    setIsSaving(false);\n  }\n};\n_s2(handleSubmit, \"eMOwVGmsGTxcHU/RKzhImH6r4B4=\");\nconst SampleCreateEdit = () => {\n  _s3();\n  const [instsType, setInstsSelection] = useState(instrumentType);\n  const toggleInstrument = inst => {\n    const instResult = instsType.map(_inst => ({\n      ..._inst,\n      selectedStatus: _inst.type === inst.type\n    }));\n    setInstsSelection(instResult);\n  };\n  const [key, setKeys] = useState(keys);\n  const toggleNotes = (note, noteSelection) => {\n    const newKeys = [...keys];\n    const noteKey = Object.keys(newKeys[note])[0];\n    newKeys[note][noteKey][noteSelection] = !newKeys[note][noteKey][noteSelection];\n    setKeys(newKeys);\n  };\n\n  /* const togglePreview = (prev) => {\n      let prevResult = preview.filter((_prev) => _prev.previewStatus !== prev.previewStatus);\n      setPreviewing([...prevResult, {...prev, selectedStatus: !prev.selectedStatus}]);\n  } */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Edit Sample:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"card edit-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          value: sampl.name,\n          onChange: e => setSample({\n            ...sample,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"button\",\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"Submit\",\n            className: \"bright-button\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-row-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row-label\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Instrument\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sequence-row-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: instsType.map(inst => /*#__PURE__*/_jsxDEV(SelectInstrument, {\n              instrument: inst.type,\n              selected: inst.selectedStatus,\n              toggleSelection: () => toggleInstrument(inst)\n            }, inst.type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), keys.map((keyObject, index) => {\n        const keyName = Object.keys(keyObject)[0];\n        const keyStatuses = keyObject[keyName];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-row-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row-label\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: keyName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sequence-row-container\",\n            children: keyStatuses.map((status, buttonIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: status ? \"toggle-selected\" : \"toggle\",\n              onClick: () => toggleNotes(index, buttonIndex),\n              onChange: e => setSample({\n                ...sample,\n                keys: e.target.value\n              })\n            }, `button-${keyName}-${buttonIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, keyName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s3(SampleCreateEdit, \"upu4dAFtA3SPUnxFjJKRNyG7GsY=\");\n_c2 = SampleCreateEdit;\nfunction SelectInstrument({\n  instrument,\n  selected,\n  toggleSelection\n}) {\n  const handleClick = () => {\n    toggleSelection();\n  };\n  const buttonClass = selected ? 'toggle-selected' : 'toggle';\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: buttonClass,\n    onClick: handleClick,\n    children: instrument\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_c3 = SelectInstrument;\nfunction Preview({\n  toneObject,\n  toneTransport,\n  tonePart\n}) {\n  _s4();\n  const initialPreviewing = false;\n  const [previewing, setPreviewing] = useState(initialPreviewing);\n  function handleButtonClick() {\n    toneObject.start();\n    toneTransport.stop();\n    if (previewing) {\n      setPreviewing(false);\n      console.log(\"Preview stopped manually.\");\n    } else {\n      setPreviewing(true);\n      console.log(\"Preview started.\");\n      toneTransport.start();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleButtonClick,\n    className: previewing ? \"toggle-selected\" : \"toggle\",\n    children: previewing ? \"Stop Previewing\" : \"Previewing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 12\n  }, this);\n}\n_s4(Preview, \"6WpevstZuCV79Yxb1mTiX7LCfiM=\");\n_c4 = Preview;\nexport default SampleCreateEdit;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"EditSamplepage\");\n$RefreshReg$(_c2, \"SampleCreateEdit\");\n$RefreshReg$(_c3, \"SelectInstrument\");\n$RefreshReg$(_c4, \"Preview\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Route","Routes","NavLink","useParams","useNavigate","getCurrentDateTime","getSampleById","createSample","editSample","pianoTap","frenchHornTap","guitarTap","piano","frenchHorn","jsxDEV","_jsxDEV","Fragment","_Fragment","instrumentType","type","selectedStatus","keys","baseURL","APIKEY","songName","EditSamplepage","_s","id","history","sample","setSample","instrument","fetchSample","data","_c","handleSubmit","e","_s2","isSaving","setIsSaving","preventDefault","returnedJson","error","SampleCreateEdit","_s3","instsType","setInstsSelection","toggleInstrument","inst","instResult","map","_inst","key","setKeys","toggleNotes","note","noteSelection","newKeys","noteKey","Object","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","name","value","sampl","onChange","target","SelectInstrument","selected","toggleSelection","keyObject","index","keyName","keyStatuses","status","buttonIndex","onClick","_c2","handleClick","buttonClass","_c3","Preview","toneObject","toneTransport","tonePart","_s4","initialPreviewing","previewing","setPreviewing","handleButtonClick","start","stop","console","log","_c4","$RefreshReg$"],"sources":["/Users/mobilejc/Documents/COMP2140/assessments/A2React/songtrax/src/pages/SampleCreateEdit.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, NavLink, useParams, useNavigate } from 'react-router-dom';\nimport getCurrentDateTime from '../data/GetDateTime';\nimport { getSampleById, createSample, editSample } from '../data/api';\nimport { pianoTap, frenchHornTap, guitarTap, piano, frenchHorn } from '../data/ToneSynth';\nimport './../starterstyles.css';\n\nconst instrumentType = [\n    {type: \"Piano\", selectedStatus: true},\n    {type: \"Frech Horn\", selectedStatus: false},\n    {type: \"Guitar\", selectedStatus: false},\n    {type: \"Drums\", selectedStatus: false}\n];\n\nconst keys = [\n    {\"B\": [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]}\n];\n\n\nconst baseURL = 'https://comp2140.uqcloud.net/api/sample/';\n\nconst APIKEY = 'gdJY8BdnNf';\n\nconst songName = \"test\";\n\nconst EditSamplepage = () => {\n    \n    // Extracts the \"api_key\" param from the route.\n    const { id } = useParams();\n\n    // Allows for navigation.\n    const history = useNavigate();\n\n     // Local state for holding the sample's instrument and keys.\n    const [sample, setSample] = useState({instrument: '', keys: [], });\n     \n     /**\n      * Fetches sample by API key if it's has been created before.\n      * Sets the local state with the feteched data.\n      */\n    useEffect(() => {\n        if (id !== 'new') {\n            const fetchSample = async() => {\n                const data = await getSampleById(id);\n                setSample(data);\n            };\n            fetchSample();\n        }\n    }, [id]);\n}\n\n/**\n * Handles the form submission. \n * Calls either createSample or editSample based on whether it's a new sample or an existing one.\n */\nconst handleSubmit = async (e) => {\n\n    const [isSaving, setIsSaving] = useState(false); \n\n    e.preventDefault();\n\n    // Set loading to true when save starts\n    setIsSaving(true);\n\n    try {\n        if (id === 'new') {\n            const returnedJson = await createSample(sample);\n            history(`${baseURL}${returnedJson.id}/?api_key=${APIKEY}`);\n        } else {\n            await editSample(id, sample);\n        }\n    } catch (error) {\n        // Handle error\n    } finally {\n        // Set loading to false when save is completed.\n        setIsSaving(false);\n    }\n};\n\nconst SampleCreateEdit = () => {\n\n    const [instsType, setInstsSelection] = useState(instrumentType);\n\n    const toggleInstrument = (inst) => {\n        const instResult = instsType.map((_inst) => ({\n            ..._inst,\n            selectedStatus: _inst.type === inst.type,\n          }));\n          setInstsSelection(instResult);\n    };\n    \n    const [key, setKeys] = useState(keys);\n\n    const toggleNotes = (note, noteSelection) => {\n        const newKeys = [...keys];\n        const noteKey = Object.keys(newKeys[note])[0];\n        newKeys[note][noteKey][noteSelection] = !newKeys[note][noteKey][noteSelection];\n        setKeys(newKeys);\n    };\n\n    \n    \n    /* const togglePreview = (prev) => {\n        let prevResult = preview.filter((_prev) => _prev.previewStatus !== prev.previewStatus);\n        setPreviewing([...prevResult, {...prev, selectedStatus: !prev.selectedStatus}]);\n    } */\n\n    return (\n        <>\n            <main>\n                <h2 className=\"title\">Edit Sample:</h2>\n                <form onSubmit={handleSubmit} className=\"card edit-card\">\n                    <input \n                        type=\"text\" \n                        id=\"name\" \n                        name=\"name\" \n                        value={sampl.name}\n                        onChange={(e) => setSample({ ...sample, name: e.target.value })}>\n                    </input>\n                    <div className=\"button-group-container\">\n                        <button type=\"button\" className=\"button\">Preview</button>\n                        <button type=\"Submit\" className=\"bright-button\">Save</button>\n                    </div>\n                </form>\n\n                <div className=\"toggle-row-container\">\n                    <div className=\"row-label\">\n                        <h4>Instrument</h4>\n                    </div>\n                    <div className=\"sequence-row-container\">\n                    <button>\n                    {instsType.map((inst) => (\n                            <SelectInstrument\n                            key={inst.type}\n                            instrument={inst.type}\n                            selected={inst.selectedStatus}\n                            toggleSelection={() => toggleInstrument(inst)}\n                          />\n                        ))}\n                    </button>\n                    </div>\n                </div>\n\n                {keys.map((keyObject, index) => {\n                    const keyName = Object.keys(keyObject)[0];\n                    const keyStatuses = keyObject[keyName];\n\n                    return (\n                    <div key={keyName} className=\"toggle-row-container\">\n                        <div className=\"row-label\">\n                            <h4>{keyName}</h4>\n                        </div>\n                        <div className=\"sequence-row-container\">\n                            {keyStatuses.map((status, buttonIndex) => (\n                                <button\n                                className={status ? \"toggle-selected\" : \"toggle\"}\n                                key={`button-${keyName}-${buttonIndex}`}\n                                onClick={() => toggleNotes(index, buttonIndex)}\n                                onChange={(e) => setSample({ ...sample, keys: e.target.value})}\n                              ></button>\n                            ))}\n                        </div>\n                    </div>\n                    );\n                })}\n\n            </main>\n        </>\n    ); \n};\n\nfunction SelectInstrument({instrument, selected, toggleSelection}) {\n    const handleClick = () => {\n        toggleSelection();\n    }   \n\n    const buttonClass = selected ? 'toggle-selected' : 'toggle';\n\n  return (\n    <button className={buttonClass} onClick={handleClick}>\n      {instrument}\n    </button>\n  );\n}\n\nfunction Preview({ toneObject, toneTransport, tonePart}) {\n\n    const initialPreviewing = false;\n    const [previewing, setPreviewing] = useState(initialPreviewing);\n\n    function handleButtonClick() {\n\n        toneObject.start();\n        toneTransport.stop();\n\n        if(previewing) {\n            setPreviewing(false);\n            console.log(\"Preview stopped manually.\");\n        }\n        else {\n            setPreviewing(true);\n            console.log(\"Preview started.\");\n            toneTransport.start();\n        }\n\n    }\n\n    return <button onClick={handleButtonClick} className={previewing ? \"toggle-selected\" : \"toggle\"}>{previewing ? \"Stop Previewing\" : \"Previewing\"}</button>\n}\n\nexport default SampleCreateEdit;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}