{"ast":null,"code":"var _jsxFileName = \"/Users/mobilejc/Documents/COMP2140/assessments/A2React/songtrax/src/pages/SampleCreateEdit.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Import libraries\nimport React, { useEffect, useState, createContext, useContext } from 'react';\nimport { BrowserRouter as Router, Route, Routes, NavLink, useParams, useNavigate } from 'react-router-dom';\n\n// Import components\nimport getCurrentDateTime from '../data/GetDateTime';\nimport { getSampleById, createSample, editSample } from '../data/api';\nimport { synth, pianoTap, frenchHornTap, guitarTap, drumTap, piano, frenchHorn, guitar, drum, toneObject } from '../data/ToneInstrument';\n\n// Import css\nimport './../starterstyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar instrumentType = [{\n  type: \"Piano\",\n  selectedStatus: true\n}, {\n  type: \"Frech Horn\",\n  selectedStatus: false\n}, {\n  type: \"Guitar\",\n  selectedStatus: false\n}, {\n  type: \"Drums\",\n  selectedStatus: false\n}];\nconst initialKeys = [{\n  \"B\": [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}];\nvar tobeUpdatedKeys = [{\n  \"B\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}, {\n  \"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n}];\nconst passedKeys = [];\nconst initialKeysNote = Object.keys(initialKeys);\nconst initialKeysSeq = Object.values(initialKeys);\nconst baseURL = 'https://comp2140.uqcloud.net/api/sample/';\nconst APIKEY = 'gdJY8BdnNf';\nconst songName = \"test\";\nconst SampleCreateEdit = () => {\n  _s();\n  // Extracts the \"api_key\" param from the route.\n  const {\n    id\n  } = useParams();\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Allows for navigation.\n  const history = useNavigate();\n\n  // Local state for holding the sample's instrument and keys.\n  const [sample, setSample] = useState({\n    name: '',\n    instrument: '',\n    tobeUpdatedKeys: []\n  });\n\n  // Determine whether it's a new sample (POST) or editing an existing one (PUT).\n  const isEditing = id !== 'new';\n  const method = isEditing ? 'PUT' : 'POST';\n  console.log(instrumentType);\n  console.log(tobeUpdatedKeys);\n  console.log(sample);\n  const [instsType, setInstsSelection] = useState(instrumentType);\n\n  /**\n     * Fetches sample by API key if it's has been created before.\n     * Sets the local state with the feteched data.\n     */\n  useEffect(() => {\n    if (!isEditing) {\n      // When creating a new sample, initialize with initialKeys\n      setSample({\n        ...sample,\n        tobeUpdatedKeys: initialKeys\n      });\n    } else {\n      const fetchSample = async () => {\n        const data = await getSampleById(id);\n        const recordingData = JSON.parse(data.recording_data);\n        // Set the sample state with the fetched data\n        setSample({\n          id: id,\n          name: data.name,\n          tobeUpdatedKeys: [...recordingData],\n          instrument: data.type\n        });\n\n        // Set the instrument type based on the fetched data\n        instrumentType = instsType.map(inst => ({\n          ...inst,\n          selectedStatus: inst.type === data.type\n        }));\n        setInstsSelection(instrumentType);\n      };\n      fetchSample();\n    }\n  }, [id, isEditing]);\n  const toggleInstrument = inst => {\n    const instResult = instsType.map(_inst => ({\n      ..._inst,\n      selectedStatus: _inst.type === inst.type\n    }));\n    setInstsSelection(instResult);\n    setSample({\n      ...sample,\n      instrument: inst.type\n    });\n  };\n  const [key, setKeys] = useState(tobeUpdatedKeys);\n\n  // Toggle key selection and changing className\n  const toggleNotes = (note, noteSelection) => {\n    const newKeys = [...sample.tobeUpdatedKeys]; // Create a new copy of tobeUpdatedKeys\n    const noteKey = Object.keys(newKeys[note])[0];\n    newKeys[note][noteKey][noteSelection] = !newKeys[note][noteKey][noteSelection];\n\n    // Update the local state of sample's tobeUpdatedKeys\n    setSample({\n      ...sample,\n      tobeUpdatedKeys: newKeys\n    });\n  };\n\n  /**\n  * Handles the form submission. \n  * Calls either createSample or editSample based on whether it's a new sample or an existing one.\n  */\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Set loading to true when save starts\n    setIsSaving(true);\n    try {\n      const formData = new FormData();\n      formData.append('name', sample.name);\n      formData.append('type', sample.instrument);\n      formData.append('recording_data', JSON.stringify(sample.tobeUpdatedKeys));\n\n      // Determine the URL based on whether it's a new sample or an existing one\n      const url = id === 'new' ? `${baseURL}?api_key=${APIKEY}` : `${baseURL}${id}/?api_key=${APIKEY}`;\n      const fetchConfig = {\n        method: method,\n        // Use the 'method' variable to set either 'POST' or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.fromEntries(formData)) // Convert FormData to an object\n      };\n\n      const response = await fetch(url, fetchConfig);\n      if (response.ok) {\n        const data = await response.json();\n        if (id === 'new') {\n          const returnedJson = await createSample(sample); // Assuming createSample is the correct API function\n          // Handle success for creating a new sample\n          history('/');\n        } else {\n          // Handle success for editing an existing sample\n          // ...\n        }\n      } else {\n        // Handle error\n      }\n    } catch (error) {\n      // Handle error\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Edit Sample:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"card edit-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          value: sample.name,\n          onChange: e => setSample({\n            ...sample,\n            name: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"button\",\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"Submit\",\n            className: \"bright-button\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toggle-row-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row-label\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Instrument\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sequence-row-container\",\n          children: instsType.map(inst => /*#__PURE__*/_jsxDEV(SelectInstrument, {\n            instrument: inst.type,\n            selected: inst.selectedStatus,\n            toggleSelection: () => toggleInstrument(inst)\n          }, inst.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), sample.tobeUpdatedKeys.map((keyObject, index) => {\n        const keyName = Object.keys(keyObject)[0];\n        const keyStatuses = keyObject[keyName];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-row-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row-label\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: keyName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sequence-row-container\",\n            children: keyStatuses.map((status, buttonIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: status ? \"toggle-selected\" : \"toggle\" // Set className based on status\n              ,\n\n              onClick: () => toggleNotes(index, buttonIndex)\n            }, `button-${keyName}-${buttonIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 27\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 23\n          }, this)]\n        }, keyName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n/**\n * \n * @param {string} instrument - Instrument selected by user.\n * @param {boolean} selected - Status of instrument selection.\n * @param {*} toggleSelection - Changing the status of instrument selection.\n * @returns \n */\n_s(SampleCreateEdit, \"nRs1OYnRZoB6SjnpH2y4AatP1kc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = SampleCreateEdit;\nfunction SelectInstrument({\n  instrument,\n  selected,\n  toggleSelection\n}) {\n  const handleClick = () => {\n    toggleSelection();\n  };\n  const buttonClass = selected ? 'toggle-selected' : 'toggle';\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: buttonClass,\n    onClick: handleClick,\n    children: instrument\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SelectInstrument;\nfunction Preview({\n  previewing,\n  setPreviewing,\n  toneObject,\n  toneTransport\n}) {\n  function handleButtonClick() {\n    toneObject.start();\n    toneTransport.stop();\n    if (previewing) {\n      setPreviewing(false);\n      console.log(\"Preview stopped manually.\");\n    } else {\n      setPreviewing(true);\n      console.log(\"Preview started.\");\n      toneTransport.start();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleButtonClick,\n    className: previewing ? \"toggle-selected\" : \"toggle\",\n    children: previewing ? \"Stop Previewing\" : \"Previewing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 12\n  }, this);\n}\n_c3 = Preview;\nfunction Sequencer({\n  toneObject,\n  toneTransport,\n  tonePart\n}) {\n  _s2();\n  const [sequence, setSequence] = useState(initialKeysSeq);\n  const initialPreviewing = false;\n  const [previewing, setPreviewing] = useState(initialPreviewing);\n  useEffect(() => {\n    tonePart.clear();\n    toneTransport.cancel();\n    sequence.filter();\n  });\n}\n_s2(Sequencer, \"0FbL1f/gpwil4Nkhg2KJZ9a6xU8=\");\n_c4 = Sequencer;\nfunction Bar({\n  barID,\n  barEnabled,\n  handleBarClick,\n  instrument\n}) {\n  function barSelected() {\n    return barEnabled ? \"selected\" : \"\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `bar bar-${barID} ${barSelected()}`,\n    onClick: () => handleBarClick(barID),\n    children: barID\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 7\n  }, this);\n}\n_c5 = Bar;\nfunction Bars({\n  sequence,\n  setSequence,\n  instrument\n}) {\n  function handleBarClick(barID) {\n    const now = toneObject.now();\n\n    // Determine which instrument to trigger based on the selected instrument\n    let instrumentToTrigger;\n    switch (instrument) {\n      case \"Piano\":\n        instrumentToTrigger = piano;\n        break;\n      case \"French Horn\":\n        instrumentToTrigger = frenchHorn;\n        break;\n      case \"Guitar\":\n        instrumentToTrigger = guitar;\n        break;\n      case \"Drum\":\n        instrumentToTrigger = drum;\n        break;\n      default:\n        instrumentToTrigger = synth;\n      // Use a default instrument if none is selected\n    }\n\n    // Trigger the notes for the selected key using the chosen instrument\n    const selectedKeys = sequence[barID - 1].keys;\n    selectedKeys.forEach((status, buttonIndex) => {\n      if (status) {\n        const note = selectedKeys[buttonIndex]; // Assuming you have an array of note values corresponding to your keys\n        instrumentToTrigger.triggerAttackRelease(note, \"8n\", now);\n      }\n    });\n    const updatedSequence = sequence.map(bar => bar.barID === barID ? {\n      ...bar,\n      barEnabled: !bar.barEnabled\n    } : bar);\n    setSequence(updatedSequence);\n  }\n  return sequence.map(bar => /*#__PURE__*/_jsxDEV(Bar, {\n    barID: bar.barID,\n    barEnabled: bar.barEnabled,\n    handleBarClick: handleBarClick,\n    instrument: instrument\n  }, bar.barID, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 7\n  }, this));\n}\n_c6 = Bars;\nexport default SampleCreateEdit;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"SampleCreateEdit\");\n$RefreshReg$(_c2, \"SelectInstrument\");\n$RefreshReg$(_c3, \"Preview\");\n$RefreshReg$(_c4, \"Sequencer\");\n$RefreshReg$(_c5, \"Bar\");\n$RefreshReg$(_c6, \"Bars\");","map":{"version":3,"names":["React","useEffect","useState","createContext","useContext","BrowserRouter","Router","Route","Routes","NavLink","useParams","useNavigate","getCurrentDateTime","getSampleById","createSample","editSample","synth","pianoTap","frenchHornTap","guitarTap","drumTap","piano","frenchHorn","guitar","drum","toneObject","jsxDEV","_jsxDEV","Fragment","_Fragment","instrumentType","type","selectedStatus","initialKeys","tobeUpdatedKeys","passedKeys","initialKeysNote","Object","keys","initialKeysSeq","values","baseURL","APIKEY","songName","SampleCreateEdit","_s","id","isSaving","setIsSaving","history","sample","setSample","name","instrument","isEditing","method","console","log","instsType","setInstsSelection","fetchSample","data","recordingData","JSON","parse","recording_data","map","inst","toggleInstrument","instResult","_inst","key","setKeys","toggleNotes","note","noteSelection","newKeys","noteKey","handleSubmit","e","preventDefault","formData","FormData","append","stringify","url","fetchConfig","headers","body","fromEntries","response","fetch","ok","json","returnedJson","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","SelectInstrument","selected","toggleSelection","keyObject","index","keyName","keyStatuses","status","buttonIndex","onClick","_c","handleClick","buttonClass","_c2","Preview","previewing","setPreviewing","toneTransport","handleButtonClick","start","stop","_c3","Sequencer","tonePart","_s2","sequence","setSequence","initialPreviewing","clear","cancel","filter","_c4","Bar","barID","barEnabled","handleBarClick","barSelected","_c5","Bars","now","instrumentToTrigger","selectedKeys","forEach","triggerAttackRelease","updatedSequence","bar","_c6","$RefreshReg$"],"sources":["/Users/mobilejc/Documents/COMP2140/assessments/A2React/songtrax/src/pages/SampleCreateEdit.js"],"sourcesContent":["// Import libraries\nimport React, { useEffect, useState, createContext, useContext } from 'react';\nimport { BrowserRouter as Router, Route, Routes, NavLink, useParams, useNavigate } from 'react-router-dom';\n\n// Import components\nimport getCurrentDateTime from '../data/GetDateTime';\nimport { getSampleById, \n        createSample, \n        editSample } from '../data/api';\nimport { synth, \n        pianoTap, \n        frenchHornTap, \n        guitarTap, \n        drumTap, \n        piano, \n        frenchHorn, \n        guitar, \n        drum, \n        toneObject} from '../data/ToneInstrument';\n\n// Import css\nimport './../starterstyles.css';\n\nvar instrumentType = [\n    {type: \"Piano\", selectedStatus: true},\n    {type: \"Frech Horn\", selectedStatus: false},\n    {type: \"Guitar\", selectedStatus: false},\n    {type: \"Drums\", selectedStatus: false}\n];\n\nconst initialKeys = [\n  {\"B\": [true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]}\n];\n\nvar tobeUpdatedKeys = [\n  {\"B\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"A\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"G\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"F\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"E\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"D\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]},\n\t{\"C\": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]}\n];\n\nconst passedKeys = [];\n\nconst initialKeysNote = Object.keys(initialKeys);\nconst initialKeysSeq = Object.values(initialKeys);\n\n\nconst baseURL = 'https://comp2140.uqcloud.net/api/sample/';\n\nconst APIKEY = 'gdJY8BdnNf';\n\nconst songName = \"test\";\n\n\nconst SampleCreateEdit = () => {\n\n  // Extracts the \"api_key\" param from the route.\n  const { id } = useParams();\n\n  const [isSaving, setIsSaving] = useState(false); \n\n  // Allows for navigation.\n  const history = useNavigate();\n\n  // Local state for holding the sample's instrument and keys.\n  const [sample, setSample] = useState({\n    name: '', \n    instrument: '', \n    tobeUpdatedKeys: []\n  });\n\n\n  // Determine whether it's a new sample (POST) or editing an existing one (PUT).\n  const isEditing = id !== 'new';\n  const method = isEditing ? 'PUT' : 'POST';\n\n  console.log(instrumentType);\n  console.log(tobeUpdatedKeys);\n  console.log(sample);\n\n  const [instsType, setInstsSelection] = useState(instrumentType);\n\n  /**\n     * Fetches sample by API key if it's has been created before.\n     * Sets the local state with the feteched data.\n     */\n  useEffect(() => {\n    if (!isEditing) {\n      // When creating a new sample, initialize with initialKeys\n      setSample({\n        ...sample,\n        tobeUpdatedKeys: initialKeys,\n      });\n    } else {\n      const fetchSample = async () => {\n        const data = await getSampleById(id);\n        const recordingData = JSON.parse(data.recording_data)\n        // Set the sample state with the fetched data\n        setSample({\n          id: id,\n          name: data.name,\n          tobeUpdatedKeys: [...recordingData], \n          instrument: data.type,\n        });\n\n        // Set the instrument type based on the fetched data\n        instrumentType = instsType.map((inst) => ({\n          ...inst,\n          selectedStatus: inst.type === data.type,\n        }));\n        setInstsSelection(instrumentType);\n      };\n      fetchSample();\n    }\n  }, [id, isEditing]);\n\n  const toggleInstrument = (inst) => {\n    const instResult = instsType.map((_inst) => ({\n      ..._inst,\n      selectedStatus: _inst.type === inst.type,\n    }));\n    setInstsSelection(instResult);\n    setSample({ ...sample, instrument: inst.type });\n  };\n    \n    const [key, setKeys] = useState(tobeUpdatedKeys);\n\n    // Toggle key selection and changing className\n    const toggleNotes = (note, noteSelection) => {\n      const newKeys = [...sample.tobeUpdatedKeys]; // Create a new copy of tobeUpdatedKeys\n      const noteKey = Object.keys(newKeys[note])[0];\n      newKeys[note][noteKey][noteSelection] = !newKeys[note][noteKey][noteSelection];\n  \n      // Update the local state of sample's tobeUpdatedKeys\n      setSample({\n        ...sample,\n        tobeUpdatedKeys: newKeys,\n      });\n    };\n  \n\n    /**\n    * Handles the form submission. \n    * Calls either createSample or editSample based on whether it's a new sample or an existing one.\n    */\n    const handleSubmit = async (e) => {\n      e.preventDefault();\n    \n      // Set loading to true when save starts\n      setIsSaving(true);\n    \n      try {\n        const formData = new FormData();\n        formData.append('name', sample.name);\n        formData.append('type', sample.instrument);\n        formData.append('recording_data', JSON.stringify(sample.tobeUpdatedKeys));\n    \n        // Determine the URL based on whether it's a new sample or an existing one\n        const url = id === 'new' ? `${baseURL}?api_key=${APIKEY}` : `${baseURL}${id}/?api_key=${APIKEY}`;\n    \n        const fetchConfig = {\n          method: method, // Use the 'method' variable to set either 'POST' or 'PUT'\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(Object.fromEntries(formData)), // Convert FormData to an object\n        };\n    \n        const response = await fetch(url, fetchConfig);\n    \n        if (response.ok) {\n          const data = await response.json();\n          if (id === 'new') {\n            const returnedJson = await createSample(sample); // Assuming createSample is the correct API function\n            // Handle success for creating a new sample\n            history('/');\n          } else {\n            // Handle success for editing an existing sample\n            // ...\n          }\n        } else {\n          // Handle error\n        }\n      } catch (error) {\n        // Handle error\n      } finally {\n        setIsSaving(false);\n      }\n    };\n    \n\n    return (\n        <>\n            <main>\n                <h2 className=\"title\">Edit Sample:</h2>\n                <form onSubmit={handleSubmit} className=\"card edit-card\">\n                    <input \n                        type=\"text\" \n                        id=\"name\" \n                        name=\"name\"\n                        value={sample.name}\n                        onChange={(e) => setSample({ ...sample, name: e.target.value })}>\n                    </input>\n                    <div className=\"button-group-container\">\n                        <button type=\"button\" className=\"button\">Preview</button>\n                        <button type=\"Submit\" className=\"bright-button\">Save</button>\n                    </div>\n                </form>\n\n                <div className=\"toggle-row-container\">\n                    <div className=\"row-label\">\n                        <h4>Instrument</h4>\n                    </div>\n                    <div className=\"sequence-row-container\">\n                    {instsType.map((inst) => (\n                            <SelectInstrument\n                            key={inst.type}\n                            instrument={inst.type}\n                            selected={inst.selectedStatus}\n                            toggleSelection={() => toggleInstrument(inst)}\n                          />\n                        ))}\n                    </div>\n                </div>\n\n                {sample.tobeUpdatedKeys.map((keyObject, index) => {\n                  const keyName = Object.keys(keyObject)[0];\n                  const keyStatuses = keyObject[keyName];\n\n                  return (\n                    <div key={keyName} className=\"toggle-row-container\">\n                      <div className=\"row-label\">\n                        <h4>{keyName}</h4>\n                      </div>\n                      <div className=\"sequence-row-container\">\n                        {keyStatuses.map((status, buttonIndex) => (\n                          <button\n                            className={status ? \"toggle-selected\" : \"toggle\"} // Set className based on status\n                            key={`button-${keyName}-${buttonIndex}`}\n                            onClick={() => toggleNotes(index, buttonIndex)}\n                          ></button>\n                        ))}\n                      </div>\n                    </div>\n                  );\n                })}\n\n\n            </main>\n        </>\n    ); \n};\n\n/**\n * \n * @param {string} instrument - Instrument selected by user.\n * @param {boolean} selected - Status of instrument selection.\n * @param {*} toggleSelection - Changing the status of instrument selection.\n * @returns \n */\nfunction SelectInstrument({instrument, selected, toggleSelection}) {\n    const handleClick = () => {\n        toggleSelection();\n    }   \n\n    const buttonClass = selected ? 'toggle-selected' : 'toggle';\n\n  return (\n    <button className={buttonClass} onClick={handleClick}>\n      {instrument}\n    </button>\n  );\n}\n\nfunction Preview({ previewing, setPreviewing, toneObject, toneTransport }) {\n\n    function handleButtonClick() {\n\n        toneObject.start();\n        toneTransport.stop();\n\n        if(previewing) {\n            setPreviewing(false);\n            console.log(\"Preview stopped manually.\");\n        }\n        else {\n            setPreviewing(true);\n            console.log(\"Preview started.\");\n            toneTransport.start();\n        }\n\n    }\n\n    return <button onClick={handleButtonClick} className={previewing ? \"toggle-selected\" : \"toggle\"}>{previewing ? \"Stop Previewing\" : \"Previewing\"}</button>\n}\n\nfunction Sequencer({ toneObject, toneTransport, tonePart }) {\n    \n    \n    const [sequence, setSequence] = useState(initialKeysSeq);\n\n    const initialPreviewing = false;\n    const [previewing, setPreviewing] = useState(initialPreviewing);\n\n    useEffect(() => {\n\n        tonePart.clear();\n        toneTransport.cancel();\n\n        sequence.filter();\n    });\n}\n\nfunction Bar({ barID, barEnabled, handleBarClick, instrument }) {\n    function barSelected() {\n      return barEnabled ? \"selected\" : \"\";\n    }\n  \n    return (\n      <div className={`bar bar-${barID} ${barSelected()}`} onClick={() => handleBarClick(barID)}>\n        {barID}\n      </div>\n    );\n  }\n\n  function Bars({ sequence, setSequence, instrument }) {\n    function handleBarClick(barID) {\n      const now = toneObject.now();\n  \n      // Determine which instrument to trigger based on the selected instrument\n      let instrumentToTrigger;\n      switch (instrument) {\n        case \"Piano\":\n          instrumentToTrigger = piano;\n          break;\n        case \"French Horn\":\n          instrumentToTrigger = frenchHorn;\n          break;\n        case \"Guitar\":\n          instrumentToTrigger = guitar;\n          break;\n        case \"Drum\":\n          instrumentToTrigger = drum;\n          break;\n        default:\n          instrumentToTrigger = synth; // Use a default instrument if none is selected\n      }\n  \n      // Trigger the notes for the selected key using the chosen instrument\n      const selectedKeys = sequence[barID - 1].keys;\n      selectedKeys.forEach((status, buttonIndex) => {\n        if (status) {\n          const note = selectedKeys[buttonIndex]; // Assuming you have an array of note values corresponding to your keys\n          instrumentToTrigger.triggerAttackRelease(note, \"8n\", now);\n        }\n      });\n  \n      const updatedSequence = sequence.map((bar) =>\n        bar.barID === barID ? { ...bar, barEnabled: !bar.barEnabled } : bar\n      );\n      setSequence(updatedSequence);\n    }\n  \n    return sequence.map((bar) => (\n      <Bar\n        key={bar.barID}\n        barID={bar.barID}\n        barEnabled={bar.barEnabled}\n        handleBarClick={handleBarClick}\n        instrument={instrument}\n      />\n    ));\n}\n\n\nexport default SampleCreateEdit;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}