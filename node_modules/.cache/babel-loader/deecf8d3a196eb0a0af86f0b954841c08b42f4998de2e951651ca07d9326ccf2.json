{"ast":null,"code":"/**\n * Base URL of sample for API requests.\n */\nconst sampleURL = 'https://comp2140.uqcloud.net/api/sample/';\n\n/**\n * Base URL of location for API requests.\n */\nconst locURL = 'https://comp2140.uqcloud.net/api/location/';\n\n/**\n * Base URL of sampleToLocation for API requests.\n */\nconst stlURL = 'https://comp2140.uqcloud.net/api/sampletolocation/';\n\n/**\n * API Key for API requests.\n */\nconst APIKEY = 'gdJY8BdnNf';\n\n/**\n * Fetches all sample from the API.\n * @returns {Promise} - Promise resolving to an array.\n */\nexport const getAllSamples = async () => {\n  const allSamplesAPI = await fetch(`${sampleURL}?api_key=${APIKEY}`);\n  return allSamplesAPI.json();\n};\n\n/**\n * Fetches a single sample by id.\n * @param {string} id - The API key of the sample.\n * @returns {Promise} - Promise resolving to the sample object.\n */\nexport const getSampleById = async id => {\n  const sampleAPI = await fetch(`${sampleURL}${id}/?api_key=${APIKEY}`);\n  return sampleAPI.json();\n};\n\n/**\n * Create a new sample.\n * @param {object} sample - The sample object containting api_key, name, recording_data, type and datetime.\n * @returns {Promise} - Promise resolving to the created sample object.\n */\nexport const createSample = async sample => {\n  const response = await fetch(sampleURL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(sample)\n  });\n  return response.json();\n};\n\n/**\n * Updates an existing sample by API key.\n * @param {string} api_key - The API key of the sample to update.\n * @param {object} sample - The updated sample object.\n * @returns {Promise} - Promise resolving to the updated sample object.\n */\nexport const editSample = async (api_key, sample) => {\n  const response = await fetch(`${sampleURL}${api_key}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(sample)\n  });\n  return response.json();\n};\n\n/**\n * Fetches all locations from the API.\n * @returns {Promise} - Promise resolving to an array of all locations.\n */\nexport const getAllLocations = async () => {\n  const response = await fetch(locURL);\n  return response.json();\n};\n\n/**\n * Fetches Location by id from the API.\n * @param {string} id - id of Location generated by Django API.\n * @returns {Promise} - Promise resolving to an array of all locations.\n */\nexport const getLocationById = async id => {\n  const response = await fetch(`${locURL}${id}/?api_key=${APIKEY}`);\n};","map":{"version":3,"names":["sampleURL","locURL","stlURL","APIKEY","getAllSamples","allSamplesAPI","fetch","json","getSampleById","id","sampleAPI","createSample","sample","response","method","headers","body","JSON","stringify","editSample","api_key","getAllLocations","getLocationById"],"sources":["/Users/mobilejc/Documents/COMP2140/assessments/A2React/songtrax/src/data/api.js"],"sourcesContent":["/**\n * Base URL of sample for API requests.\n */\nconst sampleURL = 'https://comp2140.uqcloud.net/api/sample/';\n\n/**\n * Base URL of location for API requests.\n */\nconst locURL = 'https://comp2140.uqcloud.net/api/location/';\n\n/**\n * Base URL of sampleToLocation for API requests.\n */\nconst stlURL = 'https://comp2140.uqcloud.net/api/sampletolocation/';\n\n/**\n * API Key for API requests.\n */\nconst APIKEY = 'gdJY8BdnNf';\n\n/**\n * Fetches all sample from the API.\n * @returns {Promise} - Promise resolving to an array.\n */\nexport const getAllSamples = async () => {\n    const allSamplesAPI = await fetch(`${sampleURL}?api_key=${APIKEY}`);\n    return allSamplesAPI.json();\n};\n\n/**\n * Fetches a single sample by id.\n * @param {string} id - The API key of the sample.\n * @returns {Promise} - Promise resolving to the sample object.\n */\nexport const getSampleById = async (id) => {\n    const sampleAPI = await fetch(`${sampleURL}${id}/?api_key=${APIKEY}`);\n    return sampleAPI.json();\n};\n\n/**\n * Create a new sample.\n * @param {object} sample - The sample object containting api_key, name, recording_data, type and datetime.\n * @returns {Promise} - Promise resolving to the created sample object.\n */\nexport const createSample = async (sample) => {\n    const response = await fetch(sampleURL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(sample),\n    });\n    return response.json();\n};\n\n/**\n * Updates an existing sample by API key.\n * @param {string} api_key - The API key of the sample to update.\n * @param {object} sample - The updated sample object.\n * @returns {Promise} - Promise resolving to the updated sample object.\n */\nexport const editSample = async (api_key, sample) => {\n    const response = await fetch(`${sampleURL}${api_key}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(sample),\n    });\n    return response.json();\n};\n\n/**\n * Fetches all locations from the API.\n * @returns {Promise} - Promise resolving to an array of all locations.\n */\nexport const getAllLocations = async () => {\n    const response = await fetch(locURL);\n    return response.json();\n};\n\n/**\n * Fetches Location by id from the API.\n * @param {string} id - id of Location generated by Django API.\n * @returns {Promise} - Promise resolving to an array of all locations.\n */\nexport const getLocationById = async(id) => {\n    const response = await fetch (`${locURL}${id}/?api_key=${APIKEY}`);\n};"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,GAAG,0CAA0C;;AAE5D;AACA;AACA;AACA,MAAMC,MAAM,GAAG,4CAA4C;;AAE3D;AACA;AACA;AACA,MAAMC,MAAM,GAAG,oDAAoD;;AAEnE;AACA;AACA;AACA,MAAMC,MAAM,GAAG,YAAY;;AAE3B;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAE,GAAEN,SAAU,YAAWG,MAAO,EAAC,CAAC;EACnE,OAAOE,aAAa,CAACE,IAAI,CAAC,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,EAAE,IAAK;EACvC,MAAMC,SAAS,GAAG,MAAMJ,KAAK,CAAE,GAAEN,SAAU,GAAES,EAAG,aAAYN,MAAO,EAAC,CAAC;EACrE,OAAOO,SAAS,CAACH,IAAI,CAAC,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAG,MAAOC,MAAM,IAAK;EAC1C,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACN,SAAS,EAAE;IACpCc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,MAAM;EACjC,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACN,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMY,UAAU,GAAG,MAAAA,CAAOC,OAAO,EAAER,MAAM,KAAK;EACjD,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAAE,GAAEN,SAAU,GAAEoB,OAAQ,EAAC,EAAE;IACnDN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,MAAM;EACjC,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACN,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMR,QAAQ,GAAG,MAAMP,KAAK,CAACL,MAAM,CAAC;EACpC,OAAOY,QAAQ,CAACN,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,eAAe,GAAG,MAAMb,EAAE,IAAK;EACxC,MAAMI,QAAQ,GAAG,MAAMP,KAAK,CAAG,GAAEL,MAAO,GAAEQ,EAAG,aAAYN,MAAO,EAAC,CAAC;AACtE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}