/**
 * Base URL of sample for API requests.
 */
const sampleURL = 'https://comp2140.uqcloud.net/api/sample/';

/**
 * Base URL of location for API requests.
 */
const locURL = 'https://comp2140.uqcloud.net/api/location/';

/**
 * Base URL of sampleToLocation for API requests.
 */
const stlURL = 'https://comp2140.uqcloud.net/api/sampletolocation/';

/**
 * API Key for API requests.
 */
const APIKEY = 'gdJY8BdnNf';

// Sample API

/**
 * Fetches all sample from the API.
 * @returns {Promise} - Promise resolving to an array.
 */
export const getAllSamples = async () => {
    const allSamplesAPI = await fetch(`${sampleURL}?api_key=${APIKEY}`);
    return allSamplesAPI.json();
};

/**
 * Fetches a single sample by id.
 * @param {string} id - The API key of the sample.
 * @returns {Promise} - Promise resolving to the sample object.
 */
export const getSampleById = async (id) => {
    const sampleAPI = await fetch(`${sampleURL}${id}/?api_key=${APIKEY}`);
    return sampleAPI.json();
};

/**
 * Create a new sample.
 * @param {object} sample - The sample object containting api_key, name, recording_data, type and datetime.
 * @returns {Promise} - Promise resolving to the created sample object.
 */
export const createSample = async (sample) => {
    const response = await fetch(sampleURL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(sample),
    });
    return response.json();
};

/**
 * Updates an existing sample by API key.
 * @param {string} api_key - The API key of the sample to update.
 * @param {object} sample - The updated sample object.
 * @returns {Promise} - Promise resolving to the updated sample object.
 */
export const editSample = async (api_key, sample) => {
    const response = await fetch(`${sampleURL}${api_key}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(sample),
    });
    return response.json();
};

// Location API

/**
 * Fetches all locations from the API.
 * @returns {Promise} - Promise resolving to an array of all locations.
 */
export const getAllLocations = async () => {
    const response = await fetch(locURL);
    return response.json();
};

/**
 * Fetches Location by id from the API.
 * @param {string} id - id of Location generated by Django API.
 * @returns {Promise} - Promise resolving to an array of all locations.
 */
export const getLocationById = async(id) => {
    const response = await fetch (`${locURL}${id}/?api_key=${APIKEY}`);
};

/**
 * Update the sharing status of a sample at a location with optional filters.
 * @param {string} sampleApiKey - The API key of the sample.
 * @param {string} locationId - The ID of the location to update.
 * @param {boolean} sharingStatus - The new sharing status (true or false).
 * @param {string} sampleId - (Optional) Filter by sample_id.
 * @returns {Promise} - Promise resolving to the updated link object.
 */
export const updateSampleLocationSharingStatus = async (sampleApiKey, locationId, sharingStatus, sampleId = null) => {
    let apiUrl = `${stlURL}?sample_api_key=${sampleApiKey}&location_id=${locationId}`;
    
    if (sampleId) {
        apiUrl += `&sample_id=${sampleId}`;
    }
    
    const response = await fetch(apiUrl, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            sharing: sharingStatus,
        }),
    });
    return response.json();
};

// Sample to Location API

/**
 * Fetches location links for a sample by its API key with optional filters.
 * @param {string} sampleApiKey - The API key of the sample.
 * @param {string} sampleId - (Optional) Filter by sample_id.
 * @param {string} locationId - (Optional) Filter by location_id.
 * @returns {Promise} - Promise resolving to an array of location links.
 */
export const getSampleLocationLinks = async (sampleApiKey, sampleId = null, locationId = null) => {
    let apiUrl = `${stlURL}?sample_api_key=${sampleApiKey}`;
    
    if (sampleId) {
        apiUrl += `&sample_id=${sampleId}`;
    }
    
    if (locationId) {
        apiUrl += `&location_id=${locationId}`;
    }
    
    const response = await fetch(apiUrl);
    return response.json();
};